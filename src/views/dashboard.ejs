<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous">
  </script>
  <link href="/stylesheets/style.css" rel="stylesheet">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
    integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous">
  </script>
  <script src="https://unpkg.com/feather-icons"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
  <style>
    canvas {
      -moz-user-select: none;
      -webkit-user-select: none;
      -ms-user-select: none;
    }
  </style>
  <title><%= title %></title>
</head>

<body>
  <% include header.ejs %>
  <div class="container mt-4">
    <div class="row">
      <% include sidebar.ejs %>
      <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4">
        <div
          class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
          <h1 class="h2">Dashboard</h1>
        </div>
        <div class="container">
          <p class="lead mb-5">Welcome <%= user.firstName %> <%= user.lastName %></p>
          <div class="row">
            <div class="col-sm">
              <div class="img-container">
                <img class="img-fd mx-auto img mb-3" title="House" src=<%= user.image %> alt="Image of users house">
              </div>
            </div>
            <div class="col-sm">
              <p>First Name: <%= user.firstName %> </p>
              <p>Last Name: <%= user.lastName %> </p>
              <p>Email: <%= user.email %> </p>
              <p>Role: <%= user.role %> </p>
              <p>Region: <%= user.region %> </p>
            </div>
          </div>
          <div class="container mt-3 "></div>
          <h1 class="h2">Controls</h1>
          <div class="row mt-3">
            <div class="col">
              <form method="POST" action="/api/simulation/users/houseElectricityRatio">
                <div class="form-group">
                  <label for="houseControl">Set production to power plant battery, (0 - 100 %). </label>
                  <div class="range-container">
                    <input type="range" class="form-control-range" id="houseBatteryRatioRange" name="number" min="0"
                      max="100" onchange="updateTextInput(this.value);">
                    <input type="text" id="textInput">
                    <input type="hidden" value=<%= user.email%> name="userEmail" />
                  </div>
                </div>
                <div>
                  <button type="submit" class="btn-sm btn-primary">Confirm</button>
                </div>
              </form>
            </div>
            <div class="col-md btnreset pl-0">
              <form method="POST" action="/api/simulation/users/resetHouseElectricityRatio">
                <div>
                  <input type="hidden" value=<%= user.email%> name="userEmail" />
                </div>
                <div>
                  <button type="submit" title="Set control to standard value and let simulation run on auto pilot" class="btn-sm btn-primary">Auto</button>
                </div>
              </form>
            </div>
          </div>
        </div>
        <div class="ml-3 mt-5">
          <p>Wind Turbine Status: <span class="badge badge-success" id='windturbine-status'></span></p>
          <p>Simulation: <span class="badge badge-success" id="running-status">Running</span></p>
        </div>
        <div style="width:100%;">
          <canvas id="myChart"></canvas>
        </div>
        <div class="container mt-5">
          <h2><%= user.firstName %>'s household</h2>
        </div>
        <div class="table-responsive">
          <table class="table table-striped table-sm">
            <thead>
              <tr>
                <th>Date (GMT+1)</th>
                <th>Production (kWh)</th>
                <th>Consumption (kWh)</th>
                <th>Net production (kWh)</th>
                <th>Battery capacity (Ah)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
              <tr>
                <td><span class='timestamp'></span></td>
                <td><span class='currentPower'></span> / <span class='maxPower'></span></td>
                <td><span class='houseConsumption'></span> / <span class='maxHouseConsumption'></span</td> <td><span
                      class='netProduction'></span></td>
                <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
              </tr>
            </tbody>
          </table>
        </div>
    </div>
  </div>
  <footer class="blog-footer mt-5">
    <% include footer.ejs %>
  </footer>
  <script src='../javascripts/house.js'></script>
  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      const ctx = document.getElementById('myChart').getContext('2d');
      const myChart = new Chart(ctx, {
        type: 'line',
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          },
          animation: false
        }
      });
      const runningStatus = document.getElementById('running-status');
      const interval = 1000;
      const animateRunning = () => {
        runningStatus.innerHTML = 'Running'
        setTimeout(() => {
          runningStatus.innerHTML = 'Running.'
        }, interval)
        setTimeout(() => {
          runningStatus.innerHTML = 'Running..'
        }, interval * 2)
        setTimeout(() => {
          runningStatus.innerHTML = 'Running...'
        }, interval * 3);
      };
      animateRunning();
      setInterval(animateRunning, interval * 4);
      const windTurbineStatus = document.getElementById('windturbine-status');
      const timestamp = document.getElementsByClassName('timestamp');
      const batteryCurrCapacity = document.getElementsByClassName('batteryCurrCapacity');
      const batteryMaxCapacity = document.getElementsByClassName('batteryMaxCapacity');
      const currentPower = document.getElementsByClassName('currentPower');
      const maxPower = document.getElementsByClassName('maxPower');
      const maxHouseConsumption = document.getElementsByClassName('maxHouseConsumption');
      const houseConsumption = document.getElementsByClassName('houseConsumption');
      const netProduction = document.getElementsByClassName('netProduction');
      const fetchChartData = () => {
        getHouses().then(houses => {
          windTurbineStatus.innerHTML = houses.statusMessage[houses.statusMessage.length - 1];
          if (houses.statusMessage[houses.statusMessage.length - 1] == "FULLY OPERATIONAL" ||
            houses.statusMessage[houses.statusMessage.length - 1] ==
            "FULLY OPERATIONAL: MANUAL CONTROL") {
            windTurbineStatus.style.background = '#28A745';
          } else {
            windTurbineStatus.style.background = '#DC3545';
          }
          for (let i = 0; i < (houses.timestamp.length); i++) {
            const length = houses.timestamp.length - 1;
            timestamp[length - i].innerHTML = houses.timestamp[i];
            batteryCurrCapacity[length - i].innerHTML = houses.currentCapacity[i].toPrecision(4);
            batteryMaxCapacity[length - i].innerHTML = houses.maxCapacity[i].toPrecision(4);
            currentPower[length - i].innerHTML = houses.currentPower[i].toPrecision(4);
            maxPower[length - i].innerHTML = houses.maxPower[i].toPrecision(4);
            maxHouseConsumption[length - i].innerHTML = houses.maxHouseConsumption[i].toPrecision(4);
            houseConsumption[length - i].innerHTML = houses.houseConsumption[i].toPrecision(4);
            netProduction[length - i].innerHTML = houses.netProduction[i].toPrecision(4);
          }
          myChart.data = {
            labels: houses.timestamp,
            datasets: [{
                label: 'Consumption (kWh)',
                backgroundColor: 'rgba(255, 159, 64, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                data: houses.houseConsumption,
                fill: true,
              },
              {
                label: 'Production (kWh)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                data: houses.currentPower,
                fill: true,
              }
            ]
          }
          myChart.update();
        });
      }
      fetchChartData();
      setInterval(fetchChartData, 3000);
    })
    const houseBatteryRatioRange = document.getElementById('houseBatteryRatioRange');
    const fetchLastProdValue = () => {
      getHouseBatteryRatio().then(house => {

        houseBatteryRatioRange.value = house.batteryRatio;
        updateTextInput(house.batteryRatio);
      });
    }
    fetchLastProdValue();

    function updateTextInput(val) {
      document.getElementById('textInput').value = val;
    }
  </script>
</body>

</html>