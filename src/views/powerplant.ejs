<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous">
  </script>
  <link href="/stylesheets/style.css" rel="stylesheet">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
    integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous">
  </script>
  <script src="https://unpkg.com/feather-icons"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
  <style>
    canvas {
      -moz-user-select: none;
      -webkit-user-select: none;
      -ms-user-select: none;
    }
  </style>
  <title><%= title %></title>
</head>

<body>
  <% include header.ejs %>
  <div class="container mt-4">
    <div class="row">
      <% include sidebar.ejs %>
      <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4">
        <div
          class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
          <h1 class="h2">Dashboard</h1>
        </div>
        <% if (user.role == "admin" || user.role == "manager"){ %>
        <div class="container">
          <div class="container mt-3 ">
            <h1 class="h2">Controls</h1>
            <div class="row">
              <div class="col">
                <form method="POST" action="/api/simulation/users/productionControl">
                  <div class="form-group">
                    <label for="productionControl">Manually set power plant production, (0 - 30 kWh). </label>
                    <div class="range-container">
                      <input type="range" class="form-control-range" id="powerPlantProductionRange" name="number"
                        min="0" max="30" onchange="updateTextInput(this.value);">
                      <input type="text" id="textInput">
                    </div>
                  </div>
                  <div>
                    <button type="submit" class="btn-sm btn-primary">Confirm</button>
                  </div>
                </form>
              </div>
              <div class="col-md btnreset pl-0">
                <form method="POST" action="/api/simulation/users/productionReset">
                  <div>
                    <button type="submit" class="btn-sm btn-primary">Reset</button>
                  </div>
                </form>
              </div>
            </div>
            <div class="row mt-3">
              <div class="col">
                <form method="POST" action="/api/simulation/users/electricityRatio">
                  <div class="form-group">
                    <label for="productionControl">Set battery transfer to market battery, (0 - 100 %). </label>
                    <div class="range-container">
                      <input type="range" class="form-control-range" id="powerPlantProductionRange2" name="number"
                        min="0" max="100" onchange="updateTextInput2(this.value);">
                      <input type="text" id="textInput2">
                    </div>
                  </div>
                  <div>
                    <button type="submit" class="btn-sm btn-primary">Confirm</button>
                  </div>
                </form>
              </div>
              <div class="col-md btnreset pl-0">
                <form method="POST" action="/api/simulation/users/electricityRatioReset">
                  <div>
                    <button type="submit" class="btn-sm btn-primary ">Reset</button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
        <% } %>
        <div class="ml-3 mt-5">
          <p>Power Plant Status: <span class="badge badge-success" id='powerplant-status'></span></p>
          <p>Simulation: <span class="badge badge-success" id="running-status">Running</span></p>
        </div>
        <div style="width:100%;">
          <canvas id="myChart"></canvas>
        </div>
        <div class="container mt-5">
          <h2><span id='powerplant-name'></span> status</h2>
          <div class="table-responsive">
            <table class="table table-striped table-sm">
              <thead>
                <tr>
                  <th>Date (GMT+1)</th>
                  <th>Production (kWh)</th>
                  <th>Total market production (kWh)</th>
                  <th>Battery capacity (Ah)</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
                <tr>
                  <td><span class='timestamp'></span></td>
                  <td><span class='currentProduction'></span> / <span class='maxProduction'></span></td>
                  <td><span class='currentTotalProduction'></span> / <span class='maxTotalProduction'></span></td>
                  <td><span class='batteryCurrCapacity'></span> / <span class='batteryMaxCapacity'></span></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
    </div>
    <footer class="blog-footer mt-5">
      <% include footer.ejs %>
    </footer>
    <script src='../javascripts/powerplant.js'></script>
    <script src='../javascripts/marketprice.js'></script>
    <script>
      document.addEventListener('DOMContentLoaded', (event) => {
        const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
          type: 'line',
          options: {
            scales: {
              yAxes: [{
                ticks: {
                  beginAtZero: true
                }
              }]
            },
            animation: false
          }
        });
        const runningStatus = document.getElementById('running-status');
        const interval = 1000;
        const animateRunning = () => {
          runningStatus.innerHTML = 'Running'
          setTimeout(() => {
            runningStatus.innerHTML = 'Running.'
          }, interval)
          setTimeout(() => {
            runningStatus.innerHTML = 'Running..'
          }, interval * 2)
          setTimeout(() => {
            runningStatus.innerHTML = 'Running...'
          }, interval * 3);
        };
        animateRunning();
        setInterval(animateRunning, interval * 4);
        const powerPlantStatus = document.getElementById('powerplant-status');
        const powerPlantName = document.getElementById('powerplant-name');
        const timestamp = document.getElementsByClassName('timestamp');
        const batteryCurrCapacity = document.getElementsByClassName('batteryCurrCapacity');
        const batteryMaxCapacity = document.getElementsByClassName('batteryMaxCapacity');
        const currentProduction = document.getElementsByClassName('currentProduction');
        const maxProduction = document.getElementsByClassName('maxProduction');
        const currentTotalProduction = document.getElementsByClassName('currentTotalProduction');
        const maxTotalProduction = document.getElementsByClassName('maxTotalProduction');
        const fetchChartData = () => {
          getMarketPrices().then(marketPrices => {
            for (let i = 0; i < (marketPrices.timestamp.length); i++) {
              const length = marketPrices.timestamp.length - 1;
              currentTotalProduction[length - i].innerHTML = marketPrices.currentProduction[i]
                .toPrecision(4);
              maxTotalProduction[length - i].innerHTML = marketPrices.maxTotalProduction[i].toPrecision(
                4);
            }
          });
          getPowerPlants().then(powerPlant => {
            powerPlantName.innerHTML = powerPlant.name[powerPlant.name.length - 1];

            powerPlantStatus.innerHTML = powerPlant.statusMessage[powerPlant.statusMessage.length - 1];
            if (powerPlant.statusMessage[powerPlant.statusMessage.length - 1] == "FULLY OPERATIONAL" ||
              powerPlant.statusMessage[powerPlant.statusMessage.length - 1] ==
              "FULLY OPERATIONAL: MANUAL CONTROL") {
              powerPlantStatus.style.background = '#28A745';
            } else {
              powerPlantStatus.style.background = '#DC3545';
            }
            for (let i = 0; i < (powerPlant.timestamp.length); i++) {
              const length = powerPlant.timestamp.length - 1;
              timestamp[length - i].innerHTML = powerPlant.timestamp[i];
              batteryCurrCapacity[length - i].innerHTML = powerPlant.currentCapacity[i].toPrecision(4);
              batteryMaxCapacity[length - i].innerHTML = powerPlant.maxCapacity[i].toPrecision(4);
              currentProduction[length - i].innerHTML = powerPlant.currentProduction[i].toPrecision(4);
              maxProduction[length - i].innerHTML = powerPlant.maxProduction[i].toPrecision(4);
            }
            myChart.data = {
              labels: powerPlant.timestamp,
              datasets: [{
                label: 'Production (kWh)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                data: powerPlant.currentProduction,
                fill: true,
              }]
            }
            myChart.update();
          });
        }
        fetchChartData();
        setInterval(fetchChartData, 3000);
      })


      const powerPlantProductionRange = document.getElementById('powerPlantProductionRange');
      const powerPlantProductionRange2 = document.getElementById('powerPlantProductionRange2');
      const fetchLastProdValue = () => {
        getLatestProductionValue().then(powerPlant => {
          powerPlantProductionRange.value = powerPlant.currentProduction;
          updateTextInput(powerPlant.currentProduction);

          powerPlantProductionRange2.value = powerPlant.batteryRatio;
          updateTextInput2(powerPlant.batteryRatio);
        });
      }
      fetchLastProdValue();

      function updateTextInput(val) {
        document.getElementById('textInput').value = val;
      }

      function updateTextInput2(val) {
        document.getElementById('textInput2').value = val;
      }
    </script>
</body>

</html>